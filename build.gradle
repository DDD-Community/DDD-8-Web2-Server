plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'ddd.caffeine'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('springCloudVersion', "2022.0.0-M5")
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.0.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //querydsl
//    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
//    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
//    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
//    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // openfeign
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"

    // 외부 API 통신 테스트 위한 라이브러리
    testImplementation("org.springframework.cloud:spring-cloud-contract-wiremock")

    //IO
    implementation 'commons-io:commons-io:2.11.0'

    // jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

    // jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.0'

    //UUID
    implementation "com.fasterxml.uuid:java-uuid-generator:4.0.1"

    //hibernate-spatial : 좌표를 다루기 위해 import
    implementation group: 'org.hibernate', name: 'hibernate-spatial', version: '6.1.5.Final'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
//
////querydsl 생성 폴더 설정
//def generatedClassesPath = "build/generated/source/querydsl"
//
//querydsl {
//    jpa = true
//    querydslSourcesDir = generatedClassesPath
//}
//
//def queryDslOutput = file(generatedClassesPath)
//sourceSets {
//    main {
//        java {
//            srcDir queryDslOutput
//        }
//    }
//}